{"version":3,"sources":["App.js","index.js"],"names":["App","dom","useEffect","setInitialVals","can","canvas","ctx","getContext","score","ball","x","width","y","height","size","speed","dx","dy","visible","paddle","w","h","brickInfo","padding","offsetX","offsetY","bricks","i","j","moveBall","forEach","column","brick","setTimeout","showAllBricks","draw","clearRect","beginPath","arc","Math","PI","fillStyle","fill","closePath","rect","font","fillText","update","requestAnimationFrame","document","addEventListener","e","key","id","onClick","roles","classList","add","className","ref","el","remove","input","ReactDOM","render","StrictMode","getElementById"],"mappings":"4JA6ReA,MA1Rf,WACE,IAAIC,EAAM,GACVC,qBAAU,WACRC,EAAeF,EAAIG,OAClB,CAACH,IAEJ,IAAME,EAAiB,SAACE,GA0CtB,IAzCA,IAAMC,EAAMD,EAAOE,WAAW,MAC1BC,EAAQ,EAONC,EAAO,CACXC,EAAGL,EAAOM,MAAQ,EAClBC,EAAGP,EAAOQ,OAAS,EACnBC,KAAM,GACNC,MAAO,EACPC,GAAI,EACJC,IAAK,EACLC,SAAS,GAILC,EAAS,CACbT,EAAGL,EAAOM,MAAQ,EAAI,GACtBC,EAAGP,EAAOQ,OAAS,GACnBO,EAAG,GACHC,EAAG,GACHN,MAAO,EACPC,GAAI,EACJE,SAAS,GAILI,EAAY,CAChBF,EAAG,GACHC,EAAG,GACHE,QAAS,GACTC,QAAS,GACTC,QAAS,GACTP,SAAS,GAILQ,EAAS,GACNC,EAAI,EAAGA,EAtCM,EAsCaA,IAAK,CACtCD,EAAOC,GAAK,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAvCO,EAuCeA,IAAK,CACzC,IAAMlB,EAAIiB,GAAKL,EAAUF,EAAIE,EAAUC,SAAWD,EAAUE,QACtDZ,EAAIgB,GAAKN,EAAUD,EAAIC,EAAUC,SAAWD,EAAUG,QAC5DC,EAAOC,GAAGC,GAAV,aAAiBlB,IAAGE,KAAMU,IAwD9B,SAASO,IACPpB,EAAKC,GAAKD,EAAKO,GACfP,EAAKG,GAAKH,EAAKQ,IAGXR,EAAKC,EAAID,EAAKK,KAAOT,EAAOM,OAASF,EAAKC,EAAID,EAAKK,KAAO,KAC5DL,EAAKO,KAAO,IAIVP,EAAKG,EAAIH,EAAKK,KAAOT,EAAOQ,QAAUJ,EAAKG,EAAIH,EAAKK,KAAO,KAC7DL,EAAKQ,KAAO,GAOZR,EAAKC,EAAID,EAAKK,KAAOK,EAAOT,GAC5BD,EAAKC,EAAID,EAAKK,KAAOK,EAAOT,EAAIS,EAAOC,GACvCX,EAAKG,EAAIH,EAAKK,KAAOK,EAAOP,IAE5BH,EAAKQ,IAAMR,EAAKM,OAIlBW,EAAOI,SAAQ,SAACC,GACdA,EAAOD,SAAQ,SAACE,GACVA,EAAMd,SAENT,EAAKC,EAAID,EAAKK,KAAOkB,EAAMtB,GAC3BD,EAAKC,EAAID,EAAKK,KAAOkB,EAAMtB,EAAIsB,EAAMZ,GACrCX,EAAKG,EAAIH,EAAKK,KAAOkB,EAAMpB,GAC3BH,EAAKG,EAAIH,EAAKK,KAAOkB,EAAMpB,EAAIoB,EAAMX,IAErCZ,EAAKQ,KAAO,EACZe,EAAMd,SAAU,IAiBxBV,EAES,KAA0C,IACjDC,EAAKS,SAAU,EACfC,EAAOD,SAAU,EAGjBe,YAAW,WACTC,IACA1B,EAAQ,EACRW,EAAOT,EAAIL,EAAOM,MAAQ,EAAI,GAC9BQ,EAAOP,EAAIP,EAAOQ,OAAS,GAC3BJ,EAAKC,EAAIL,EAAOM,MAAQ,EACxBF,EAAKG,EAAIP,EAAOQ,OAAS,EACzBJ,EAAKS,SAAU,EACfC,EAAOD,SAAU,IArKT,aA8IRT,EAAKG,EAAIH,EAAKK,KAAOT,EAAOQ,SAC9BqB,IACA1B,EAAQ,GA2BZ,SAAS0B,IACPR,EAAOI,SAAQ,SAACC,GACdA,EAAOD,SAAQ,SAACE,GAAD,OAAYA,EAAMd,SAAU,QAK/C,SAASiB,IAEP7B,EAAI8B,UAAU,EAAG,EAAG/B,EAAOM,MAAON,EAAOQ,QArIzCP,EAAI+B,YACJ/B,EAAIgC,IAAI7B,EAAKC,EAAGD,EAAKG,EAAGH,EAAKK,KAAM,EAAa,EAAVyB,KAAKC,IAC3ClC,EAAImC,UAAYhC,EAAKS,QAAU,UAAY,cAC3CZ,EAAIoC,OACJpC,EAAIqC,YAKJrC,EAAI+B,YACJ/B,EAAIsC,KAAKzB,EAAOT,EAAGS,EAAOP,EAAGO,EAAOC,EAAGD,EAAOE,GAC9Cf,EAAImC,UAAYtB,EAAOD,QAAU,UAAY,cAC7CZ,EAAIoC,OACJpC,EAAIqC,YAKJrC,EAAIuC,KAAO,aACXvC,EAAIwC,SAAJ,iBAAuBtC,GAASH,EAAOM,MAAQ,IAAK,IAKpDe,EAAOI,SAAQ,SAACC,GACdA,EAAOD,SAAQ,SAACE,GACd1B,EAAI+B,YACJ/B,EAAIsC,KAAKZ,EAAMtB,EAAGsB,EAAMpB,EAAGoB,EAAMZ,EAAGY,EAAMX,GAC1Cf,EAAImC,UAAYT,EAAMd,QAAU,UAAY,cAC5CZ,EAAIoC,OACJpC,EAAIqC,mBAgHV,SAASI,IAzGP5B,EAAOT,GAAKS,EAAOH,GAGfG,EAAOT,EAAIS,EAAOC,EAAIf,EAAOM,QAC/BQ,EAAOT,EAAIL,EAAOM,MAAQQ,EAAOC,GAG/BD,EAAOT,EAAI,IACbS,EAAOT,EAAI,GAmGbmB,IAGAM,IAEAa,sBAAsBD,GAGxBA,GAwBAE,SAASC,iBAAiB,WArB1B,SAAiBC,GACD,UAAVA,EAAEC,KAA6B,eAAVD,EAAEC,IACzBjC,EAAOH,GAAKG,EAAOJ,MACA,SAAVoC,EAAEC,KAA4B,cAAVD,EAAEC,MAC/BjC,EAAOH,IAAMG,EAAOJ,UAkBxBkC,SAASC,iBAAiB,SAb1B,SAAeC,GAED,UAAVA,EAAEC,KACQ,eAAVD,EAAEC,KACQ,SAAVD,EAAEC,KACQ,cAAVD,EAAEC,MAEFjC,EAAOH,GAAK,OAgBlB,OACE,oCACE,yCACA,4BACEqC,GAAG,YACHC,QAAS,WAAerD,EAAIsD,MAX1BC,UAAUC,IAAI,SAYhBC,UAAU,iBAHZ,cAOA,yBAAKL,GAAG,QAAQM,IAAK,SAACC,GAAD,OAAS3D,EAAIsD,MAAQK,GAAKF,UAAU,SACvD,4CACA,0HAIA,0FACA,4BACEL,GAAG,YACHC,QAAS,WAAerD,EAAIsD,MArB5BC,UAAUK,OAAO,SAsBjBH,UAAU,OAHZ,UASF,4BACEC,IAAK,SAACG,GAAD,OAAY7D,EAAIG,IAAM0D,GAC3BT,GAAG,SACH1C,MAAM,MACNE,OAAO,UCnRfkD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,U","file":"static/js/main.fcc1e751.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  let dom = {};\n  useEffect(() => {\n    setInitialVals(dom.can);\n  }, [dom]);\n\n  const setInitialVals = (canvas) => {\n    const ctx = canvas.getContext('2d');\n    let score = 0;\n\n    const brickRowCount = 9;\n    const brickColumnCount = 5;\n    const delay = 500; //delay to reset the game\n\n    // Create ball props\n    const ball = {\n      x: canvas.width / 2,\n      y: canvas.height / 2,\n      size: 10,\n      speed: 4,\n      dx: 4,\n      dy: -4,\n      visible: true,\n    };\n\n    // Create paddle props\n    const paddle = {\n      x: canvas.width / 2 - 40,\n      y: canvas.height - 20,\n      w: 80,\n      h: 10,\n      speed: 8,\n      dx: 0,\n      visible: true,\n    };\n\n    // Create brick props\n    const brickInfo = {\n      w: 70,\n      h: 20,\n      padding: 10,\n      offsetX: 45,\n      offsetY: 60,\n      visible: true,\n    };\n\n    // Create bricks\n    const bricks = [];\n    for (let i = 0; i < brickRowCount; i++) {\n      bricks[i] = [];\n      for (let j = 0; j < brickColumnCount; j++) {\n        const x = i * (brickInfo.w + brickInfo.padding) + brickInfo.offsetX;\n        const y = j * (brickInfo.h + brickInfo.padding) + brickInfo.offsetY;\n        bricks[i][j] = { x, y, ...brickInfo };\n      }\n    }\n\n    // Draw ball on canvas\n    function drawBall() {\n      ctx.beginPath();\n      ctx.arc(ball.x, ball.y, ball.size, 0, Math.PI * 2);\n      ctx.fillStyle = ball.visible ? '#0095dd' : 'transparent';\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    // Draw paddle on canvas\n    function drawPaddle() {\n      ctx.beginPath();\n      ctx.rect(paddle.x, paddle.y, paddle.w, paddle.h);\n      ctx.fillStyle = paddle.visible ? '#0095dd' : 'transparent';\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    // Draw score on canvas\n    function drawScore() {\n      ctx.font = '20px Arial';\n      ctx.fillText(`Score: ${score}`, canvas.width - 100, 30);\n    }\n\n    // Draw bricks on canvas\n    function drawBricks() {\n      bricks.forEach((column) => {\n        column.forEach((brick) => {\n          ctx.beginPath();\n          ctx.rect(brick.x, brick.y, brick.w, brick.h);\n          ctx.fillStyle = brick.visible ? '#0095dd' : 'transparent';\n          ctx.fill();\n          ctx.closePath();\n        });\n      });\n    }\n\n    // Move paddle on canvas\n    function movePaddle() {\n      paddle.x += paddle.dx;\n\n      // Wall detection\n      if (paddle.x + paddle.w > canvas.width) {\n        paddle.x = canvas.width - paddle.w;\n      }\n\n      if (paddle.x < 0) {\n        paddle.x = 0;\n      }\n    }\n\n    // Move ball on canvas\n    function moveBall() {\n      ball.x += ball.dx;\n      ball.y += ball.dy;\n\n      // Wall collision (right/left)\n      if (ball.x + ball.size > canvas.width || ball.x - ball.size < 0) {\n        ball.dx *= -1; // ball.dx = ball.dx * -1\n      }\n\n      // Wall collision (top/bottom)\n      if (ball.y + ball.size > canvas.height || ball.y - ball.size < 0) {\n        ball.dy *= -1;\n      }\n\n      // console.log(ball.x, ball.y);\n\n      // Paddle collision\n      if (\n        ball.x - ball.size > paddle.x &&\n        ball.x + ball.size < paddle.x + paddle.w &&\n        ball.y + ball.size > paddle.y\n      ) {\n        ball.dy = -ball.speed;\n      }\n\n      // Brick collision\n      bricks.forEach((column) => {\n        column.forEach((brick) => {\n          if (brick.visible) {\n            if (\n              ball.x - ball.size > brick.x && // left brick side check\n              ball.x + ball.size < brick.x + brick.w && // right brick side check\n              ball.y + ball.size > brick.y && // top brick side check\n              ball.y - ball.size < brick.y + brick.h // bottom brick side check\n            ) {\n              ball.dy *= -1;\n              brick.visible = false;\n\n              increaseScore();\n            }\n          }\n        });\n      });\n\n      // Hit bottom wall - Lose\n      if (ball.y + ball.size > canvas.height) {\n        showAllBricks();\n        score = 0;\n      }\n    }\n\n    // Increase score\n    function increaseScore() {\n      score++;\n\n      if (score % (brickRowCount * brickColumnCount) === 0) {\n        ball.visible = false;\n        paddle.visible = false;\n\n        //After 0.5 sec restart the game\n        setTimeout(function () {\n          showAllBricks();\n          score = 0;\n          paddle.x = canvas.width / 2 - 40;\n          paddle.y = canvas.height - 20;\n          ball.x = canvas.width / 2;\n          ball.y = canvas.height / 2;\n          ball.visible = true;\n          paddle.visible = true;\n        }, delay);\n      }\n    }\n\n    // Make all bricks appear\n    function showAllBricks() {\n      bricks.forEach((column) => {\n        column.forEach((brick) => (brick.visible = true));\n      });\n    }\n\n    // Draw everything\n    function draw() {\n      // clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      drawBall();\n      drawPaddle();\n      drawScore();\n      drawBricks();\n    }\n\n    // Update canvas drawing and animation\n    function update() {\n      movePaddle();\n      moveBall();\n\n      // Draw everything\n      draw();\n\n      requestAnimationFrame(update);\n    }\n\n    update();\n\n    // Keydown event\n    function keyDown(e) {\n      if (e.key === 'Right' || e.key === 'ArrowRight') {\n        paddle.dx = paddle.speed;\n      } else if (e.key === 'Left' || e.key === 'ArrowLeft') {\n        paddle.dx = -paddle.speed;\n      }\n    }\n\n    // Keyup event\n    function keyUp(e) {\n      if (\n        e.key === 'Right' ||\n        e.key === 'ArrowRight' ||\n        e.key === 'Left' ||\n        e.key === 'ArrowLeft'\n      ) {\n        paddle.dx = 0;\n      }\n    }\n\n    // Keyboard event handlers\n    document.addEventListener('keydown', keyDown);\n    document.addEventListener('keyup', keyUp);\n  };\n\n  const showRols = (roles) => {\n    roles.classList.add('show');\n  };\n\n  const hideRols = (roles) => {\n    roles.classList.remove('show');\n  };\n  return (\n    <>\n      <h1>Breakout!</h1>\n      <button\n        id=\"rules-btn\"\n        onClick={() => showRols(dom.roles)}\n        className=\"btn rules-btn\"\n      >\n        Show Rules\n      </button>\n      <div id=\"rules\" ref={(el) => (dom.roles = el)} className=\"rules\">\n        <h2>How To Play:</h2>\n        <p>\n          Use your right and left keys to move the paddle to bounce the ball up\n          and break the blocks.\n        </p>\n        <p>If you miss the ball, your score and the blocks will reset.</p>\n        <button\n          id=\"close-btn\"\n          onClick={() => hideRols(dom.roles)}\n          className=\"btn\"\n        >\n          Close\n        </button>\n      </div>\n\n      <canvas\n        ref={(input) => (dom.can = input)}\n        id=\"canvas\"\n        width=\"800\"\n        height=\"600\"\n      ></canvas>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}